const express = require('express');
const fs = require('fs')
const mongoose = require('mongoose');
const axios = require('axios'); 
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../key.env') }); // Pointer to the API Key hash

const app = express();
const PORT = process.env.PORT || 5000;
const DB_PATH = 'mongodb://127.0.0.1:27017/SpoonacularAPI_DB';

app.set('view engine', 'ejs');
mongoose.connect(DB_PATH);
app.use(express.static(path.join(__dirname, '../public')));

// Endpoint to fetch individual recipe information from Spoonacular
app.get('/fetchRecipe/:id', async (req, res) => {
    const recipeId = req.params.id;
    try {
        const response = await axios.get(`https://api.spoonacular.com/recipes/${recipeId}/information?apiKey=${process.env.SPOONACULAR_API_KEY}&includeNutrition=true`);
        // Save the data to a JSON file
        //const filePath = path.join(__dirname, 'recipeData.json');
        //fs.writeFileSync(filePath, JSON.stringify(response.data, null, 2), 'utf-8');
        res.json(response.data);
    } catch (error) {
        console.error(error);
        res.status(500).send('Error fetching recipe information');
    }
});

// Endpoint to perform a complex search
app.get('/complexSearch', async (req, res) => {
    const { query, cuisine, intolerances, diet } = req.query;

    try {
        const response = await axios.get(`https://api.spoonacular.com/recipes/complexSearch`, {
            params: {
                apiKey: process.env.SPOONACULAR_API_KEY,
                query,
                cuisine,
                intolerances,
                diet,
            },
        });

        // Save the search results to a JSON file
        const filePath = path.join(__dirname, 'searchRecipe.json');
        fs.writeFileSync(filePath, JSON.stringify(response.data, null, 2), 'utf-8');

        res.json(response.data);
    } catch (error) {
        console.error(error);
        res.status(500).send('Error performing complex search');
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
